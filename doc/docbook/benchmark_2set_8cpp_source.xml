<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_benchmark_2set_8cpp_source" xml:lang="en-US">
<title>set.cpp</title>
<indexterm><primary>benchmark/set.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_benchmark_2set_8cpp_source_1l00001"/>00001 
<anchor xml:id="_benchmark_2set_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_benchmark_2set_8cpp_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="_benchmark_2set_8cpp_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_benchmark_2set_8cpp_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
<anchor xml:id="_benchmark_2set_8cpp_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&lt;thread&gt;</emphasis>
<anchor xml:id="_benchmark_2set_8cpp_source_1l00012"/>00012 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
<anchor xml:id="_benchmark_2set_8cpp_source_1l00013"/>00013 <emphasis role="preprocessor">#include&#32;&lt;mutex&gt;</emphasis>
<anchor xml:id="_benchmark_2set_8cpp_source_1l00014"/>00014 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_set_8h">set.h</link>&quot;</emphasis>
<anchor xml:id="_benchmark_2set_8cpp_source_1l00018"/><link linkend="_benchmark_2set_8cpp_1a8b63d9cfb464ec3956b2124708f4ee7b">00018</link> std::mutex&#32;<link linkend="_benchmark_2set_8cpp_1a8b63d9cfb464ec3956b2124708f4ee7b">out</link>;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00023"/><link linkend="_benchmark_2set_8cpp_1ab303d4247db74cc19619552567daa6a4">00023</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_benchmark_2set_8cpp_1ab303d4247db74cc19619552567daa6a4">print</link>(std::string&#32;msg)&#32;{
<anchor xml:id="_benchmark_2set_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;waiting&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(waiting)&#32;{
<anchor xml:id="_benchmark_2set_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_benchmark_2set_8cpp_1a8b63d9cfb464ec3956b2124708f4ee7b">out</link>.try_lock())&#32;{
<anchor xml:id="_benchmark_2set_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;msg&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_benchmark_2set_8cpp_1a8b63d9cfb464ec3956b2124708f4ee7b">out</link>.unlock();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;waiting&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_benchmark_2set_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::this_thread::sleep_for(std::chrono::milliseconds(5));
<anchor xml:id="_benchmark_2set_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_benchmark_2set_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;}
<anchor xml:id="_benchmark_2set_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00035"/>00035 }
<anchor xml:id="_benchmark_2set_8cpp_source_1l00036"/>00036 
<anchor xml:id="_benchmark_2set_8cpp_source_1l00043"/><link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">00043</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(std::string&#32;name,&#32;std::function&lt;<emphasis role="keywordtype">void</emphasis>()&gt;&#32;function,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
<anchor xml:id="_benchmark_2set_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt;&#32;pstr,&#32;pend;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00045"/>00045 
<anchor xml:id="_benchmark_2set_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;pstr&#32;=&#32;std::chrono::high_resolution_clock::now();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;i++)&#32;{function();}
<anchor xml:id="_benchmark_2set_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;pend&#32;=&#32;std::chrono::high_resolution_clock::now();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;mstr&#32;=&#32;std::chrono::time_point_cast&lt;std::chrono::microseconds&gt;(pstr).time_since_epoch().count();&#32;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;mend&#32;=&#32;std::chrono::time_point_cast&lt;std::chrono::microseconds&gt;(pend).time_since_epoch().count();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nstr&#32;=&#32;std::chrono::time_point_cast&lt;std::chrono::nanoseconds&gt;(pstr).time_since_epoch().count();&#32;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nend&#32;=&#32;std::chrono::time_point_cast&lt;std::chrono::nanoseconds&gt;(pend).time_since_epoch().count();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<link linkend="_benchmark_2set_8cpp_1ab303d4247db74cc19619552567daa6a4">print</link>(<emphasis role="stringliteral">&quot;Benchmark&#32;&quot;</emphasis>&#32;+&#32;name&#32;+&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;+&#32;std::to_string(mend&#32;-&#32;mstr)&#32;+&#32;<emphasis role="stringliteral">&quot;ms&#32;-&#32;&quot;</emphasis>&#32;+&#32;std::to_string(nend&#32;-&#32;nstr)&#32;+&#32;<emphasis role="stringliteral">&quot;ns&quot;</emphasis>);
<anchor xml:id="_benchmark_2set_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00057"/>00057 }
<anchor xml:id="_benchmark_2set_8cpp_source_1l00058"/>00058 
<anchor xml:id="_benchmark_2set_8cpp_source_1l00063"/><link linkend="_benchmark_2set_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00063</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_benchmark_2set_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>()&#32;{
<anchor xml:id="_benchmark_2set_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;t;&#32;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00065"/>00065 
<anchor xml:id="_benchmark_2set_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;std::thread&#32;contains([]()&#32;{<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(<emphasis role="stringliteral">&quot;Contains&quot;</emphasis>,&#32;[]()&#32;{<link linkend="_namespaceset_1a980a97ee29ca68fb5b0ff49c22317a7e">set::contains</link>({0,&#32;0,&#32;1,&#32;0,&#32;0},&#32;1);},&#32;1000);});
<anchor xml:id="_benchmark_2set_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;std::thread&#32;count([]()&#32;{<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(<emphasis role="stringliteral">&quot;Count&quot;</emphasis>,&#32;[]()&#32;{<link linkend="_namespaceset_1ac5365eb686589aa9064bab275539177a">set::count</link>({0,&#32;0,&#32;1,&#32;0,&#32;0},&#32;0);},&#32;1000);});
<anchor xml:id="_benchmark_2set_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;std::thread&#32;unique([]()&#32;{<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(<emphasis role="stringliteral">&quot;Unique&quot;</emphasis>,&#32;[]()&#32;{<link linkend="_namespaceset_1ac883181c654d551576c3ee2d1a0fa7fa">set::unique</link>(std::vector&lt;int&gt;({0,&#32;0,&#32;1,&#32;0,&#32;0}));},&#32;1000);});
<anchor xml:id="_benchmark_2set_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;std::thread&#32;sort([]()&#32;{<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(<emphasis role="stringliteral">&quot;Sort&quot;</emphasis>,&#32;[]()&#32;{<link linkend="_namespaceset_1acd71ed889f217fdd2ed230a7af7239b0">set::sort</link>(std::vector&lt;int&gt;({0,&#32;0,&#32;1,&#32;0,&#32;0}));},&#32;1000);});
<anchor xml:id="_benchmark_2set_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;std::thread&#32;rsort([]()&#32;{<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(<emphasis role="stringliteral">&quot;Reverse&#32;Sort&quot;</emphasis>,&#32;[]()&#32;{<link linkend="_namespaceset_1ac064d67f787dd20fcfbd46cbf4e7717c">set::rsort</link>(std::vector&lt;int&gt;({0,&#32;0,&#32;1,&#32;0,&#32;0}));},&#32;1000);});
<anchor xml:id="_benchmark_2set_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;std::thread&#32;reverse([]()&#32;{<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(<emphasis role="stringliteral">&quot;Reverse&quot;</emphasis>,&#32;[]()&#32;{<link linkend="_namespaceset_1acea3595093efb07e1bc491fd2d9ed303">set::reverse</link>(std::vector&lt;int&gt;({0,&#32;0,&#32;1,&#32;0,&#32;0}));},&#32;1000);});
<anchor xml:id="_benchmark_2set_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;std::thread&#32;sunion([]()&#32;{<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(<emphasis role="stringliteral">&quot;Union&quot;</emphasis>,&#32;[]()&#32;{<link linkend="_namespaceset_1ad0fdcd2362fa264e9d23cba85ccec05c">set::sunion</link>(std::vector&lt;int&gt;({1,&#32;2,&#32;3}),&#32;std::vector&lt;int&gt;({3,&#32;4,&#32;5}));},&#32;1000);});
<anchor xml:id="_benchmark_2set_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;std::thread&#32;sintersection([]()&#32;{<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(<emphasis role="stringliteral">&quot;Intersection&quot;</emphasis>,&#32;[]()&#32;{<link linkend="_namespaceset_1abbfdb13d235a0b18b76350266fe35645">set::intersection</link>(std::vector&lt;int&gt;({1,&#32;2,&#32;3}),&#32;std::vector&lt;int&gt;({3,&#32;4,&#32;5}));},&#32;1000);});
<anchor xml:id="_benchmark_2set_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;std::thread&#32;diff([]()&#32;{<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(<emphasis role="stringliteral">&quot;Difference&quot;</emphasis>,&#32;[]()&#32;{<link linkend="_namespaceset_1a37f2c9c18fda658d3fb86550e519e773">set::diff</link>(std::vector&lt;int&gt;({1,&#32;2,&#32;3}),&#32;std::vector&lt;int&gt;({3,&#32;4,&#32;5}));},&#32;1000);});
<anchor xml:id="_benchmark_2set_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;std::thread&#32;sdiff([]()&#32;{<link linkend="_benchmark_2set_8cpp_1a41101af7fad907dc7f66ee08548b23ee">benchmark</link>(<emphasis role="stringliteral">&quot;Symmetric&#32;difference&quot;</emphasis>,&#32;[]()&#32;{<link linkend="_namespaceset_1a9e1d205dc88719374276b5bd73fc13b6">set::sdiff</link>(std::vector&lt;int&gt;({1,&#32;2,&#32;3}),&#32;std::vector&lt;int&gt;({3,&#32;4,&#32;5}));},&#32;1000);});
<anchor xml:id="_benchmark_2set_8cpp_source_1l00076"/>00076 
<anchor xml:id="_benchmark_2set_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;contains.join();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;count.join();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;unique.join();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;sort.join();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;rsort.join();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;reverse.join();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;sunion.join();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;sintersection.join();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;diff.join();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;sdiff.join();
<anchor xml:id="_benchmark_2set_8cpp_source_1l00087"/>00087 
<anchor xml:id="_benchmark_2set_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_benchmark_2set_8cpp_source_1l00089"/>00089 }
</programlisting></section>
