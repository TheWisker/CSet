<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test_2set_8cpp_source" xml:lang="en-US">
<title>set.cpp</title>
<indexterm><primary>test/set.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_test_2set_8cpp_source_1l00001"/>00001 
<anchor xml:id="_test_2set_8cpp_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_test_2set_8cpp_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
<anchor xml:id="_test_2set_8cpp_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_test_2set_8cpp_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_set_8h">set.h</link>&quot;</emphasis>
<anchor xml:id="_test_2set_8cpp_source_1l00016"/><link linkend="_test_2set_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00016</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_benchmark_2set_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>()&#32;{
<anchor xml:id="_test_2set_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;r,&#32;t,&#32;tt,&#32;rr;
<anchor xml:id="_test_2set_8cpp_source_1l00018"/>00018 
<anchor xml:id="_test_2set_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;t&#32;=&#32;{0,&#32;0,&#32;1,&#32;0,&#32;0};
<anchor xml:id="_test_2set_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;assert(<link linkend="_namespaceset_1a980a97ee29ca68fb5b0ff49c22317a7e">set::contains</link>(t,&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Contains&#32;failed&#32;with&#32;lvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;assert((!<link linkend="_namespaceset_1a980a97ee29ca68fb5b0ff49c22317a7e">set::contains</link>({0,&#32;0,&#32;1,&#32;0,&#32;0},&#32;2))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Contains&#32;failed&#32;with&#32;rvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00022"/>00022 
<anchor xml:id="_test_2set_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;t&#32;=&#32;{0,&#32;0,&#32;1,&#32;0,&#32;0};
<anchor xml:id="_test_2set_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1ac5365eb686589aa9064bab275539177a">set::count</link>(t,&#32;0)&#32;==&#32;4)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Count&#32;failed&#32;with&#32;lvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1ac5365eb686589aa9064bab275539177a">set::count</link>({0,&#32;0,&#32;1,&#32;0,&#32;0},&#32;1)&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Count&#32;failed&#32;with&#32;rvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00026"/>00026 
<anchor xml:id="_test_2set_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;r&#32;=&#32;{},&#32;t&#32;=&#32;{0,&#32;0,&#32;1,&#32;0,&#32;0},&#32;rr&#32;=&#32;{0,&#32;1};
<anchor xml:id="_test_2set_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1ac883181c654d551576c3ee2d1a0fa7fa">set::unique</link>(r,&#32;t)&#32;==&#32;rr)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unique&#32;failed&#32;with&#32;lvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1ac883181c654d551576c3ee2d1a0fa7fa">set::unique</link>(t)&#32;==&#32;((std::vector&lt;int&gt;)&#32;{0,1}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unique&#32;failed&#32;with&#32;rvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00030"/>00030 
<anchor xml:id="_test_2set_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;r&#32;=&#32;{},&#32;t&#32;=&#32;{1,&#32;4,&#32;3,&#32;2,&#32;5},&#32;rr&#32;=&#32;{1,&#32;2,&#32;3,&#32;4,&#32;5};
<anchor xml:id="_test_2set_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1acd71ed889f217fdd2ed230a7af7239b0">set::sort</link>(r,&#32;t)&#32;==&#32;rr)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Sort&#32;failed&#32;with&#32;lvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1acd71ed889f217fdd2ed230a7af7239b0">set::sort</link>(t)&#32;==&#32;((std::vector&lt;int&gt;)&#32;{1,&#32;2,&#32;3,&#32;4,&#32;5}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Sort&#32;failed&#32;with&#32;rvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00034"/>00034 
<anchor xml:id="_test_2set_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;r&#32;=&#32;{},&#32;t&#32;=&#32;{1,&#32;4,&#32;3,&#32;2,&#32;5},&#32;rr&#32;=&#32;{5,&#32;4,&#32;3,&#32;2,&#32;1};
<anchor xml:id="_test_2set_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1ac064d67f787dd20fcfbd46cbf4e7717c">set::rsort</link>(r,&#32;t)&#32;==&#32;rr)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Reverse&#32;sort&#32;failed&#32;with&#32;lvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1ac064d67f787dd20fcfbd46cbf4e7717c">set::rsort</link>(t)&#32;==&#32;((std::vector&lt;int&gt;)&#32;{5,&#32;4,&#32;3,&#32;2,&#32;1}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Reverse&#32;sort&#32;failed&#32;with&#32;rvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00038"/>00038 
<anchor xml:id="_test_2set_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;r&#32;=&#32;{},&#32;t&#32;=&#32;{1,&#32;2,&#32;3,&#32;4,&#32;5},&#32;rr&#32;=&#32;{5,&#32;4,&#32;3,&#32;2,&#32;1};
<anchor xml:id="_test_2set_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1acea3595093efb07e1bc491fd2d9ed303">set::reverse</link>(r,&#32;t)&#32;==&#32;rr)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Reverse&#32;failed&#32;with&#32;lvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1acea3595093efb07e1bc491fd2d9ed303">set::reverse</link>(t)&#32;==&#32;((std::vector&lt;int&gt;)&#32;{5,&#32;4,&#32;3,&#32;2,&#32;1}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Reverse&#32;failed&#32;with&#32;rvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00042"/>00042 
<anchor xml:id="_test_2set_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;r&#32;=&#32;{},&#32;t&#32;=&#32;{1,&#32;2,&#32;3},&#32;tt&#32;=&#32;{3,&#32;4,&#32;5},&#32;rr&#32;=&#32;{1,&#32;2,&#32;3,&#32;4,&#32;5};
<anchor xml:id="_test_2set_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1ad0fdcd2362fa264e9d23cba85ccec05c">set::sunion</link>(r,&#32;t,&#32;tt)&#32;==&#32;rr)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Union&#32;failed&#32;with&#32;lvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1ad0fdcd2362fa264e9d23cba85ccec05c">set::sunion</link>(t,&#32;tt)&#32;==&#32;((std::vector&lt;int&gt;)&#32;{1,&#32;2,&#32;3,&#32;4,&#32;5}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Union&#32;failed&#32;with&#32;rvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00046"/>00046 
<anchor xml:id="_test_2set_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;r&#32;=&#32;{},&#32;t&#32;=&#32;{1,&#32;2,&#32;3},&#32;tt&#32;=&#32;{3,&#32;4,&#32;5},&#32;rr&#32;=&#32;{3};
<anchor xml:id="_test_2set_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1abbfdb13d235a0b18b76350266fe35645">set::intersection</link>(r,&#32;t,&#32;tt)&#32;==&#32;rr)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Intersection&#32;failed&#32;with&#32;lvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1abbfdb13d235a0b18b76350266fe35645">set::intersection</link>(t,&#32;tt)&#32;==&#32;((std::vector&lt;int&gt;)&#32;{3}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Intersection&#32;failed&#32;with&#32;rvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00050"/>00050 
<anchor xml:id="_test_2set_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;r&#32;=&#32;{},&#32;t&#32;=&#32;{1,&#32;2,&#32;3},&#32;tt&#32;=&#32;{3,&#32;4,&#32;5},&#32;rr&#32;=&#32;{1,&#32;2};
<anchor xml:id="_test_2set_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1a37f2c9c18fda658d3fb86550e519e773">set::diff</link>(r,&#32;t,&#32;tt)&#32;==&#32;rr)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Difference&#32;failed&#32;with&#32;lvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1a37f2c9c18fda658d3fb86550e519e773">set::diff</link>(t,&#32;tt)&#32;==&#32;((std::vector&lt;int&gt;)&#32;{1,&#32;2}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Difference&#32;failed&#32;with&#32;rvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00054"/>00054 
<anchor xml:id="_test_2set_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;r&#32;=&#32;{},&#32;t&#32;=&#32;{1,&#32;2,&#32;3},&#32;tt&#32;=&#32;{3,&#32;4,&#32;5},&#32;rr&#32;=&#32;{1,&#32;2,&#32;4,&#32;5};
<anchor xml:id="_test_2set_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1a9e1d205dc88719374276b5bd73fc13b6">set::sdiff</link>(r,&#32;t,&#32;tt)&#32;==&#32;rr)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Symmetric&#32;difference&#32;failed&#32;with&#32;lvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;assert((<link linkend="_namespaceset_1a9e1d205dc88719374276b5bd73fc13b6">set::sdiff</link>(t,&#32;tt)&#32;==&#32;((std::vector&lt;int&gt;)&#32;{1,&#32;2,&#32;4,&#32;5}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Symmetric&#32;difference&#32;failed&#32;with&#32;rvalue&#32;vector!&quot;</emphasis>);
<anchor xml:id="_test_2set_8cpp_source_1l00058"/>00058 
<anchor xml:id="_test_2set_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;All&#32;tests&#32;passed&#32;smoothly!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_test_2set_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_test_2set_8cpp_source_1l00061"/>00061 }
</programlisting></section>
