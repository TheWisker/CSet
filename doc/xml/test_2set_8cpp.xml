<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="test_2set_8cpp" kind="file" language="C++">
    <compoundname>set.cpp</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">cassert</includes>
    <includes local="no">iostream</includes>
    <includes refid="set_8h" local="yes">set.h</includes>
    <incdepgraph>
      <node id="5">
        <label>set.h</label>
        <link refid="set_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>test/set.cpp</label>
        <link refid="test_2set_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cassert</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test_2set_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
<para>Runs all the tests. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(int) Returns 0 to specify to Meson that the tests finished correctly </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/set.cpp" line="16" column="5" bodyfile="test/set.cpp" bodystart="16" bodyend="53"/>
        <references refid="namespaceset_1a980a97ee29ca68fb5b0ff49c22317a7e" compoundref="set_8h" startline="136" endline="139">set::contains</references>
        <references refid="namespaceset_1ac5365eb686589aa9064bab275539177a" compoundref="set_8h" startline="143" endline="147">set::count</references>
        <references refid="namespaceset_1a37f2c9c18fda658d3fb86550e519e773" compoundref="set_8h" startline="174" endline="177">set::diff</references>
        <references refid="namespaceset_1abbfdb13d235a0b18b76350266fe35645" compoundref="set_8h" startline="166" endline="170">set::intersection</references>
        <references refid="namespaceset_1a9e1d205dc88719374276b5bd73fc13b6" compoundref="set_8h" startline="181" endline="185">set::sdiff</references>
        <references refid="namespaceset_1ad0fdcd2362fa264e9d23cba85ccec05c" compoundref="set_8h" startline="158" endline="162">set::sunion</references>
        <references refid="namespaceset_1ac883181c654d551576c3ee2d1a0fa7fa" compoundref="set_8h" startline="151" endline="154">set::unique</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the main test file of the cset library. It contains all the test needed to assure that the library works properly. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains the main function with asserts that every library method works as it should.<linebreak/>
Each method gets tested with two asserts that verify that the library method returns the expected value when performing an operation.<linebreak/>
If it doesn&apos;t then a message gets printed to the console describing the error. If this does happen open an issue on my github page. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="set_8h" kindref="compound">set.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="test_2set_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="benchmark_2set_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>r,<sp/>t,<sp/>tt,<sp/>rr;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>{0,<sp/>0,<sp/>1,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceset_1a980a97ee29ca68fb5b0ff49c22317a7e" kindref="member">set::contains</ref>(t,<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Contains<sp/>failed<sp/>with<sp/>lvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((!<ref refid="namespaceset_1a980a97ee29ca68fb5b0ff49c22317a7e" kindref="member">set::contains</ref>({0,<sp/>0,<sp/>1,<sp/>0,<sp/>0},<sp/>2))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Contains<sp/>failed<sp/>with<sp/>rvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>{0,<sp/>0,<sp/>1,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceset_1ac5365eb686589aa9064bab275539177a" kindref="member">set::count</ref>(t,<sp/>0)<sp/>==<sp/>4)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Count<sp/>failed<sp/>with<sp/>lvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceset_1ac5365eb686589aa9064bab275539177a" kindref="member">set::count</ref>({0,<sp/>0,<sp/>1,<sp/>0,<sp/>0},<sp/>1)<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Count<sp/>failed<sp/>with<sp/>rvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>{},<sp/>t<sp/>=<sp/>{0,<sp/>0,<sp/>1,<sp/>0,<sp/>0},<sp/>rr<sp/>=<sp/>{0,<sp/>1};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceset_1ac883181c654d551576c3ee2d1a0fa7fa" kindref="member">set::unique</ref>(r,<sp/>t)<sp/>==<sp/>rr)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Unique<sp/>failed<sp/>with<sp/>lvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceset_1ac883181c654d551576c3ee2d1a0fa7fa" kindref="member">set::unique</ref>(r,<sp/>t)<sp/>==<sp/>((std::vector&lt;int&gt;)<sp/>{0,1}))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Unique<sp/>failed<sp/>with<sp/>rvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>{},<sp/>t<sp/>=<sp/>{1,<sp/>2,<sp/>3},<sp/>tt<sp/>=<sp/>{3,<sp/>4,<sp/>5},<sp/>rr<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceset_1ad0fdcd2362fa264e9d23cba85ccec05c" kindref="member">set::sunion</ref>(r,<sp/>t,<sp/>tt);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((r<sp/>==<sp/>rr)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Union<sp/>failed<sp/>with<sp/>lvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((r<sp/>==<sp/>((std::vector&lt;int&gt;)<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5}))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Union<sp/>failed<sp/>with<sp/>rvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>{},<sp/>t<sp/>=<sp/>{1,<sp/>2,<sp/>3},<sp/>tt<sp/>=<sp/>{3,<sp/>4,<sp/>5},<sp/>rr<sp/>=<sp/>{3};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceset_1abbfdb13d235a0b18b76350266fe35645" kindref="member">set::intersection</ref>(r,<sp/>t,<sp/>tt);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((r<sp/>==<sp/>rr)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Intersection<sp/>failed<sp/>with<sp/>lvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((r<sp/>==<sp/>((std::vector&lt;int&gt;)<sp/>{3}))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Intersection<sp/>failed<sp/>with<sp/>rvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>{},<sp/>t<sp/>=<sp/>{1,<sp/>2,<sp/>3},<sp/>tt<sp/>=<sp/>{3,<sp/>4,<sp/>5},<sp/>rr<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceset_1a37f2c9c18fda658d3fb86550e519e773" kindref="member">set::diff</ref>(r,<sp/>t,<sp/>tt);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((r<sp/>==<sp/>rr)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Difference<sp/>failed<sp/>with<sp/>lvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((r<sp/>==<sp/>((std::vector&lt;int&gt;)<sp/>{1,<sp/>2}))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Difference<sp/>failed<sp/>with<sp/>rvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>{},<sp/>t<sp/>=<sp/>{1,<sp/>2,<sp/>3},<sp/>tt<sp/>=<sp/>{3,<sp/>4,<sp/>5},<sp/>rr<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceset_1a9e1d205dc88719374276b5bd73fc13b6" kindref="member">set::sdiff</ref>(r,<sp/>t,<sp/>tt);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((r<sp/>==<sp/>rr)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Symmetric<sp/>difference<sp/>failed<sp/>with<sp/>lvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((r<sp/>==<sp/>((std::vector&lt;int&gt;)<sp/>{1,<sp/>2,<sp/>4,<sp/>5}))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Symmetric<sp/>difference<sp/>failed<sp/>with<sp/>rvalue<sp/>vector!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>tests<sp/>passed<sp/>smoothly!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="test/set.cpp"/>
  </compounddef>
</doxygen>
